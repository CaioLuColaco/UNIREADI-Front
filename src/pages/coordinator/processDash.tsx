import { getApiClient } from "@/services/axios"
import { GetServerSideProps } from "next"
import Head from "next/head"
import { parseCookies } from "nookies"
import styles from '@/styles/CoordinatorDash.module.css'
import Navbar from "@/components/navbar"

export default function ProcessDash({ user }: any) {
    console.log(user)
    return (
        <>
            <Head>
                <title>UniReadi - Dash</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <Navbar/>
                <div className={styles.dashContainer}>

                    <div className={styles.viewMeProcess}>
                        
                        <h2>Meus Processos</h2>

                        <div className={styles.processList}>

                            {user.createdProcess.map((process: any) => {
                                return (
                                    <div className={styles.processCard} key={process.id}>
                                        <div className={styles.cardContent}>
                                            <h3>{process.name}</h3>

                                            <div className={styles.dataProcessCard}>
                                                <div className={styles.dataValue}>
                                                    <h4>{process.vacancys}</h4>
                                                    <p>Vagas</p>
                                                </div>
                                                <div className={styles.dataValue}>
                                                    <h4>{process.scholarships}</h4>
                                                    <p>Bolsas</p>
                                                </div>
                                                <div className={styles.dataValue}>
                                                    <h4>{process.course}</h4>
                                                    <p>Curso</p>
                                                </div>
                                                <div className={styles.dataValue}>
                                                    <h4>{process.beginDate.slice(8,10)}/{process.beginDate.slice(5,7)} - {process.endDate.slice(8,10)}/{process.endDate.slice(5,7)}</h4>
                                                    <p>Periodo</p>
                                                </div>
                                                <div className={styles.dataValue}>
                                                    <h4>{process.status}</h4>
                                                    <p>Status</p>
                                                </div>
                                            </div>
                                        </div>

                                        <div className={styles.cardEditButton}>
                                            <button>Editar</button>
                                        </div>
                                    </div>
                                )
                            })}

                        </div>
                    </div>

                    <div className={styles.addProcess}>

                    </div>
                </div>
            </main>
        </>
    )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
    const apiClient = getApiClient(ctx)
    const { ['uniReadiToken']: token} = parseCookies(ctx)

    if(!token) {
        return {
            redirect: {
                destination: "/login",
                permanent: false
            }
        }
    }

    const result = await apiClient.post('/decodeToken', {token: token})

    if(result.data.role != "coordinator"){
        return {
            redirect: {
                destination: "/login",
                permanent: false
            }
        }
    }

    return {
        props: { user: result.data }
    }
}